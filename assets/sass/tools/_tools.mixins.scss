/* Sass :: Tools :: Mixins */

/*
	Created:		7.1.16
	Modified:
	Author:			Nick Toye
	Version:		2.0
	Dependencies:	Inuit CSS
*/

// STRUCTURE ~ Layout, Dimensions & Placement tools
// ========

// POSITION

/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset

@mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}


// FLEXBOX

/// @include flexbox();
/// Declare $direction:row or $flow:nowrap etc to modify the default values

@mixin flexbox($direction:column, $flow:wrap) {
    display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox;      /* TWEENER - IE 10 */
    display: -webkit-flex;     /* NEW - Chrome */
    display: flex;
    flex-flow: $flow;
    flex-direction: $direction;
}


// SIZE

/// @include size(100px,50px) - this returns a 100px width and 50px height
/// @include size(100px) - this returns a 100px width and height

@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}




// VERTICAL ALIGNMENT

/// @include vertical-align(absolute);

@mixin vertical-align($pos:relative) {
    position: $pos;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    @if $pos == 'absolute' {
        position: absolute;
    }
}




// TRANSFORMER

/// @include transform(50%);

@mixin transform($h:null, $v:$h) {
    position: absolute;
    @if ($h and $v) {
        left: $h;
        top: $v;
        transform: translate(-$h, -$v);
    }
    @else if ($h) {
        left: $h;
        transform: translate(-$h);
    }
}


// CENTERER

/// @include centerer();  - left this is @mixin and @extend don't work well in
/// media query blocks

@mixin centerer() {
    @include position($top: 50%, $left: 50%);
    transform: translate(-50%, -50%);
}





// RESPONSIVE ~ Media Query related
// ==========

// Mixin to show at certain MQ breakpoints
/// @include show(town);

@mixin show($mq) {
    display: none !important;
    @include media-query($mq) {
        display: inline-block !important;
    }
}

// Mixin to hide at certain MQ breakpoints
/// @include hide(town);

@mixin hide($mq) {
    display: inline-block !important;
    @include media-query($mq) {
        display: none !important;
    }
}

// COSMETICS ~ Typography, colours and icons
// ========

// TYPOGRAPHY

/// @include font-face(FS-Emeric-Thin, '../fonts/FSEmericWeb-Thin');
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}



// TYPOGRAPHY LOADING
@mixin loading($font) {
    html.fa-events-typefaces-fs-emeric-#{$font}-loading & {
        opacity: 0;
    }
    html.fa-events-typefaces-fs-emeric-#{$font}-ready & {
        opacity: 1;
    }
    html.fa-events-typefaces-fs-emeric-#{$font}-failed & {
        opacity: 1;
    }
}



// @include typesetting(h1);

@mixin typesetting($key){
    $fontsize: map-get($type-sizes, $key);
    $resolutions: map-get($fontsize, bp);
    $typeface: map-get($fontsize, typeface);
    @include loading(map-get($fontsize, debug));
    font-family: $typeface;
    font-size: map-get($fontsize, fs);
    line-height: map-get($fontsize, lh);


   @each $resolution in $resolutions {
      @media only screen and (min-width: breakpoint(map-get($resolution, breakpoint)) ) {
         font-size: map-get($resolution, 'fs');
         line-height: map-get($resolution, 'lh');
         font-family: map-get($resolution, 'typeface');
      }
   };
}





// LINKS

/// @include link(red,blue); - shows a red link with blue hover
/// @include link(red); - shows a red link with darkened red hover

@mixin link($color,$hover:$color) {
    color: $color;
    @if $hover == $color {
        &:hover {
            color: darken($color,15%);
        }
    } @else {
        &:hover {
            color: $hover;
        }
    }
}


// TEXT EMPHASIS VARIANT

/// Specific mixin, take care.
/// @include text-emphasis-variant('.text-primary', brand-colours('primary'));
/// Not sure this is going to be required
@mixin text-emphasis-variant($parent, $color) {
    #{$parent} {
        color: $color;
    }
    a#{$parent} {
        color: darken($color, 10%);
    }
}


// COLOUR SWATCHES

/// Specific mixin, used to display swatch on range pages
/// @include swatches(yellow,darken(yellow,15%)); Yellow swatch

@mixin swatches($swatch, $swatch2:$swatch, $color:white) {
    @if $swatch2 != $swatch {
        background: linear-gradient(to bottom, $swatch,$swatch2);
    }
    @else {
        background: linear-gradient(to bottom, $swatch, darken($swatch2,10%));
    }
    &:checked {
        &:before {
            color: $color;
        }
    }
}


// COMPONENT BG

/// Specific mixin, used to display a text colour and background

@mixin componentContrast($palette, $contrast:dark, $context:null, $after:false) {
    background-color: palette(sofology,$palette) !important;
    
	@if $after == true {
	        background: none !important;
	        position: relative;
	        &:after {
		        background-color: palette(sofology,$palette) !important;
			    content: '';
			    position: absolute;
			    top: 0;
			    left: 0;
			    right: 0;
			    bottom: 0;
		    }
        }

    @if $contrast == "light" {
        color: palette(sofology,medium-grey) !important;
        i.fa {
            color: currentColor;
        }
        ul li {
            border-color: palette(sofology, medium-grey) !important;
        }



        @if $context == "rdp" {
            small {
                color: palette(sofology, medium-grey) !important;
            }
            figure {
                figcaption {
                    color: palette(sofology, medium-grey) !important;
                }
                &:hover {
                    border-color: palette(sofology, medium-grey) !important;
                    &:before {
                        background-color: palette(sofology, medium-grey) !important;
                        color: palette(sofology, white) !important;
                    }
                }
            }

        }

        h1,h2,h3,p,ul,li {
	        color: inherit !important;
	    }

    }
    @else {

        color: palette(sofology,white) !important;
        ul li {
            border-color: palette(sofology, white) !important;
        }
        .fa {
          color: palette(sofology, white);
        }


        @if $context == "rdp" {
            small {
                color: palette(sofology, white) !important;
            }
            figure {
                figcaption {
                    color: palette(sofology, white) !important;
                }
                &:hover {
                    border-color: palette(sofology, white) !important;
                    &:before {
                        background-color: palette(sofology, white) !important;
                        color: palette(sofology, medium-grey) !important;
                    }
                }
            }

        }
    }


}

@mixin componentButtons($palette, $contrast:dark) {

	background-color: palette(sofology, $palette);
	border-color: palette(sofology, $palette);
	color: palette(sofology, white);
	&:hover {
		background-color: darken(palette(sofology, $palette),10%);
		border-color: darken(palette(sofology, $palette),10%);
	}

	@if $contrast == "light" {
		color: palette(sofology, dark-grey);
	}

    button i.fa {
        color: palette(sofology,$palette) !important;
        opacity: .3;
        transition: all linear $global-transition;
        &:hover
        {
            opacity: 1;
        }
    }

    button[data-attr="selected"] i.fa,
    button.selected i.fa {
        opacity: 1;
    }

    .slick-arrow {
        background-color: palette(sofology,$palette) !important;
        @if $contrast == "light" {
            color: palette(sofology, mine-shaft) !important;
        }
        @else {
            color: palette(sofology, white) !important;
        }
    }

    ul.slick-dots {
        background-color: palette(sofology,$palette) !important;

        li i.fa {
            @if $contrast == "light" {
                color: palette(sofology, mine-shaft) !important;
            }
            @else {
                color: palette(sofology, white) !important;
            }
        }
    }
}

@mixin socialContrast($palette, $contrast:dark, $stack:false) {

    @if $stack == false {
        color: palette(socials, $palette);
        transition: all linear $global-transition;
        &:hover {
            color: shade(palette(socials, $palette), 30%);
        }
    }


    // Stacks
    @if $stack == true {
        .fa-stack-2x {
            color: palette(socials, $palette);
            transition: color linear $global-transition;
        }
        .fa-stack-1x {
            color: palette(sofology, white);
        }

        &:hover {
            .fa-stack-2x {
                color: shade(palette(socials, $palette), 30%);
            }
        }
    }

}

/// Applied some rotation to give a shimmer

@mixin swatches-metallic($swatch, $swatch2) {
    background: linear-gradient(135deg, $swatch, $swatch2, $swatch);
}

/// Stripe mixin
///
@mixin stripes($direction, $colors) {
  $length: length($colors);

  @if $length > 1 {
    $stripes: ();

    @for $i from 1 through $length {
      $stripe: (100% / $length) * ($i - 1);

      @if $i > 1 {
        $stripes: append($stripes, nth($colors, $i - 1) $stripe, comma);
      }

      $stripes: append($stripes, nth($colors, $i) $stripe, comma);
    }

    background-image: linear-gradient($direction, $stripes);
  } @else if $length == 1 {
    background-color: $colors;
  }
}


// BRAND ICONS
/// .brand-twitter { @include brand-icon(brand-colours('twitter')); }

// *** DELETE ***

@mixin brand-icon($brand) {
    i.fa-stack-2x {
        color: $brand;
    }
    i.fa-stack-1x {
        color: $white;
    }
}


// SPRITES
/// For use with the gulp sprite plugin

/// IE Fallback
@mixin ie-sprite($icon, $type: all) {
    $iconMap: icon-attr($icon);

    @if $ieSprite {
        #{$ieSprite} & {
            @if $type == all {
                // Shares the PNG background
                @extend %ie-sprite;
            }
            // Outputs dimensions of icon
            @if $type == all or $type == size {
                width: map-get($iconMap, width);
                height: map-get($iconMap, height);
            }
            // Outputs background position
            @if $type == all or $type == bg {
                background-position: (map-get($iconMap, x) - 5) (map-get($iconMap, y) - 5);
            }
        }
    }
}

/// @include sprite(sofology);
@mixin sprite($icon, $type: all) {
    @if $type == all {
        // Shares the backgrounds
        @extend %sprite;
    }
    $iconMap: icon-attr($icon);
    // Outputs dimensions in em
    @if $type == all or $type == size {
        width: em(map-get($iconMap, width) + 1);
        height: em(map-get($iconMap, height) + 1);
    }
    // Outputs background position in em
    @if $type == all or $type == bg {
        background-position: em(map-get($iconMap, x)) em(map-get($iconMap, y));
    }
    // Add ie fallback
    @include ie-sprite($icon, $type);
}


// CSS TRIANGLE
/// @include css-triangle ("up", 10px, #fff);

@mixin css-triangle ($direction: "down", $size: 20px, $color: #000) {
    @include size(0);
    border-left: $size solid #{setTriangleColor($direction, "left", $color)};
    border-right: $size solid #{setTriangleColor($direction, "right", $color)};
    border-bottom: $size solid #{setTriangleColor($direction, "bottom", $color)};
    border-top: $size solid #{setTriangleColor($direction, "top", $color)};
}


// CIRCLE BACKGROUND
/// @include circular(32px,white);

@mixin circular($unit, $bg) {
    @include size($unit);
    background: $bg;
    border-radius: $unit/2;
    display: inline-block;
    line-height: $unit;
}





// FLAIR ~ Animation
// ========

// ANIMATION
///  @include animation('rangeAnimation 500s infinite');

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';
    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};
        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation: $animations;
    -o-animation: $animations;
    animation: $animations;
}

/// Keyframes for animation
/// @include keyframes(rangeAnimation) { 0% { ... } };

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content
    }
}





// MISC ~ Mobile
// ========


// Neutralise the darkening on touch on handheld devices
/// @include neutralise-tap-highlight();
@mixin neutralise-tap-highlight() {
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    -webkit-tap-highlight-color: transparent; // For some android devices
}
